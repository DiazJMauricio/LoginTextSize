{"version":3,"sources":["Components/InputText.js","Components/TextLabel.js","Components/Controller.js","App.js","serviceWorker.js","index.js"],"names":["InputText","props","_useState","useState","_useState2","Object","slicedToArray","text","setText","react_default","a","createElement","type","value","onChange","e","target","placeholder","TextLabel","style","fontSize","size","width","boxWidth","fontFamily","className","Controller","undefined","maxSize","_useState3","_useState4","setSize","containerRef","useRef","ref","Components_TextLabel","Components_InputText","nText","context","current","getContext","nSize","font","textSize","measureText","App","setBoxWidth","Components_Controller","min","max","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8NAoBeA,SAlBG,SAAAC,GAAS,IAAAC,EACDC,mBAAS,IADRC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAClBK,EADkBH,EAAA,GACZI,EADYJ,EAAA,GAQzB,OACEK,EAAAC,EAAAC,cAAA,SACEC,KAAK,OACLC,MAAON,EACPO,SATa,SAAAC,GACfP,EAAQO,EAAEC,OAAOH,OACjBZ,EAAMa,SAASC,EAAEC,OAAOH,QAQtBI,YAAY,oBCAHC,EAbG,SAAAjB,GAChB,IAAMkB,EAAQ,CACZC,SAAUnB,EAAMoB,KAAO,KACvBC,MAAOrB,EAAMsB,SAAW,KACxBC,WAAYvB,EAAMuB,YAEpB,OACEf,EAAAC,EAAAC,cAAA,KAAGc,UAAU,YAAYN,MAAOA,GAC7BlB,EAAMM,OC0CEmB,EAhDI,SAAAzB,GACjB,IAAMsB,OAA8BI,IAAnB1B,EAAMsB,SAAyBtB,EAAMsB,SAAW,IAC3DK,OAA4BD,IAAlB1B,EAAM2B,QAAwB3B,EAAM2B,QAAU,IACxDJ,OACiBG,IAArB1B,EAAMuB,WAA2BvB,EAAMuB,WAAa,UAJ5BtB,EAKFC,mBAAS,IALPC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAKnBK,EALmBH,EAAA,GAKbI,EALaJ,EAAA,GAAAyB,EAMF1B,mBAASyB,GANPE,EAAAzB,OAAAC,EAAA,EAAAD,CAAAwB,EAAA,GAMnBR,EANmBS,EAAA,GAMbC,EANaD,EAAA,GAOpBE,EAAeC,iBAAO,MAyB5B,OACExB,EAAAC,EAAAC,cAAA,OAAKc,UAAU,cACbhB,EAAAC,EAAAC,cAAA,UAAQuB,IAAKF,IACbvB,EAAAC,EAAAC,cAACwB,EAAD,CACE5B,KAAMA,EACNc,KAAMA,EACNE,SAAUA,EACVC,WAAYA,IAEdf,EAAAC,EAAAC,cAAA,OAAKc,UAAU,aACbhB,EAAAC,EAAAC,cAACyB,EAAD,CAAWtB,SAjCA,SAAAuB,GAEf,IAAIC,EAAUN,EAAaO,QAAQC,WAAW,MAC1CC,EAAQpB,EAGZiB,EAAQI,KAAOD,EAAQ,MAAQjB,EAC/B,IAAImB,EAAWL,EAAQM,YAAYP,GAAOf,MAGtCqB,EAAWpB,GAAYkB,EAAQ,GACjCA,GAAS,KAETH,EAAQI,KAAe,IAARD,EAAc,MAAQjB,KACrCmB,EAAWL,EAAQM,YAAYP,GAAOf,OACrBC,IAAakB,EAAQb,IACpCa,GAAS,MAGbjC,EAAQ6B,GACRN,EAAQU,SCRGI,MArBf,WAAe,IAAA3C,EACmBC,mBAAS,KAD5BC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACNqB,EADMnB,EAAA,GACI0C,EADJ1C,EAAA,GAGb,OACEK,EAAAC,EAAAC,cAAA,OAAKc,UAAU,OACbhB,EAAAC,EAAAC,cAAA,UAAQc,UAAU,cAChBhB,EAAAC,EAAAC,cAACoC,EAAD,CAAYxB,SAAUA,IACtBd,EAAAC,EAAAC,cAAA,SACEC,KAAK,QACLoC,IAAI,MACJC,IAAI,MACJpC,MAAOU,EACPT,SAAU,SAAAC,GACR+B,EAAY/B,EAAEC,OAAOH,aCLbqC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/C,EAAAC,EAAAC,cAAC8C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.df00236f.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nconst InputText = props => {\r\n  const [text, setText] = useState(\"\");\r\n\r\n  const onChange = e => {\r\n    setText(e.target.value);\r\n    props.onChange(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <input\r\n      type=\"text\"\r\n      value={text}\r\n      onChange={onChange}\r\n      placeholder=\"Write here...\"\r\n    />\r\n  );\r\n};\r\n\r\nexport default InputText;\r\n","import React from \"react\";\r\n\r\nconst TextLabel = props => {\r\n  const style = {\r\n    fontSize: props.size + \"px\",\r\n    width: props.boxWidth + \"px\",\r\n    fontFamily: props.fontFamily\r\n  };\r\n  return (\r\n    <p className=\"TextLabel\" style={style}>\r\n      {props.text}\r\n    </p>\r\n  );\r\n};\r\n\r\nexport default TextLabel;\r\n","import React, { useState, useRef } from \"react\";\r\nimport InputText from \"./InputText\";\r\nimport TextLabel from \"./TextLabel\";\r\n\r\nconst Controller = props => {\r\n  const boxWidth = props.boxWidth !== undefined ? props.boxWidth : 820;\r\n  const maxSize = props.maxSize !== undefined ? props.maxSize : 200;\r\n  const fontFamily =\r\n    props.fontFamily !== undefined ? props.fontFamily : \"Courier\";\r\n  const [text, setText] = useState(\"\");\r\n  const [size, setSize] = useState(maxSize);\r\n  const containerRef = useRef(null);\r\n\r\n  const onChange = nText => {\r\n    //  Set Variables\r\n    let context = containerRef.current.getContext(\"2d\");\r\n    let nSize = size; //  TextFontSize\r\n\r\n    //  Calcular ancho actual\r\n    context.font = nSize + \"px \" + fontFamily;\r\n    let textSize = context.measureText(nText).width;\r\n\r\n    //  Comparar ancho. y cambiar TextFontSize\r\n    if (textSize > boxWidth && nSize > 20) {\r\n      nSize /= 1.5;\r\n    } else {\r\n      context.font = nSize * 1.5 + \"px \" + fontFamily;\r\n      textSize = context.measureText(nText).width;\r\n      if (!(textSize > boxWidth) && nSize < maxSize) {\r\n        nSize *= 1.5;\r\n      }\r\n    }\r\n    setText(nText);\r\n    setSize(nSize);\r\n  };\r\n\r\n  return (\r\n    <div className=\"controller\">\r\n      <canvas ref={containerRef} />\r\n      <TextLabel\r\n        text={text}\r\n        size={size}\r\n        boxWidth={boxWidth}\r\n        fontFamily={fontFamily}\r\n      />\r\n      <div className=\"InputText\">\r\n        <InputText onChange={onChange} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Controller;\r\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Controller from \"./Components/Controller\";\n\nfunction App() {\n  const [boxWidth, setBoxWidth] = useState(820);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Controller boxWidth={boxWidth} />\n        <input\n          type=\"range\"\n          min=\"420\"\n          max=\"820\"\n          value={boxWidth}\n          onChange={e => {\n            setBoxWidth(e.target.value);\n          }}\n        />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}